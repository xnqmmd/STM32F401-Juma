<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\jumawatch.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\jumawatch.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Dec 01 09:46:06 2016
<BR><P>
<H3>Maximum Stack Usage =        816 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; on_ready &rArr; ble_set_adv_param &rArr; ble_init_bluenrg &rArr; Add_Service &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[40]">CAN1_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">CAN1_RX0_IRQHandler</a><BR>
 <LI><a href="#[26]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">BusFault_Handler</a><BR>
 <LI><a href="#[24]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">HardFault_Handler</a><BR>
 <LI><a href="#[25]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">MemManage_Handler</a><BR>
 <LI><a href="#[27]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">UsageFault_Handler</a><BR>
 <LI><a href="#[aa]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[aa]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3e]">ADC_IRQHandler</a> from bsp_isr.o(i.ADC_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">BusFault_Handler</a> from bsp_isr.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6d]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6e]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6b]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7a]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[85]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream0_IRQHandler</a> from bsp_isr.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[70]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[71]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[72]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">DebugMon_Handler</a> from bsp_isr.o(i.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6a]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">EXTI4_IRQHandler</a> from bsp_isr.o(i.EXTI4_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7c]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7b]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">HardFault_Handler</a> from bsp_isr.o(i.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[75]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[74]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5]">LPS25HB_GetPressure</a> from lps25hb.o(i.LPS25HB_GetPressure) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[6]">LPS25HB_GetTemperature</a> from lps25hb.o(i.LPS25HB_GetTemperature) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[1]">LPS25HB_Init</a> from lps25hb.o(i.LPS25HB_Init) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[2]">LPS25HB_PowerOff</a> from lps25hb.o(i.LPS25HB_PowerOff) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[3]">LPS25HB_ReadID</a> from lps25hb.o(i.LPS25HB_ReadID) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[4]">LPS25HB_RebootCmd</a> from lps25hb.o(i.LPS25HB_RebootCmd) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[7]">LPS25HB_SlaveAddrRemap</a> from lps25hb.o(i.LPS25HB_SlaveAddrRemap) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[1f]">LPS25H_GetPressure</a> from lps25h.o(i.LPS25H_GetPressure) referenced 2 times from lps25h.o(.data)
 <LI><a href="#[20]">LPS25H_GetTemperature</a> from lps25h.o(i.LPS25H_GetTemperature) referenced 2 times from lps25h.o(.data)
 <LI><a href="#[1b]">LPS25H_Init</a> from lps25h.o(i.LPS25H_Init) referenced 2 times from lps25h.o(.data)
 <LI><a href="#[1c]">LPS25H_PowerOff</a> from lps25h.o(i.LPS25H_PowerOff) referenced 2 times from lps25h.o(.data)
 <LI><a href="#[1d]">LPS25H_ReadID</a> from lps25h.o(i.LPS25H_ReadID) referenced 2 times from lps25h.o(.data)
 <LI><a href="#[1e]">LPS25H_RebootCmd</a> from lps25h.o(i.LPS25H_RebootCmd) referenced 2 times from lps25h.o(.data)
 <LI><a href="#[21]">LPS25H_SlaveAddrRemap</a> from lps25h.o(i.LPS25H_SlaveAddrRemap) referenced 2 times from lps25h.o(.data)
 <LI><a href="#[19]">LSM6DS3_Disable_Free_Fall_Detection</a> from lsm6ds3.o(i.LSM6DS3_Disable_Free_Fall_Detection) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[18]">LSM6DS3_Enable_Free_Fall_Detection</a> from lsm6ds3.o(i.LSM6DS3_Enable_Free_Fall_Detection) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[c]">LSM6DS3_G_GetAxes</a> from lsm6ds3.o(i.LSM6DS3_G_GetAxes) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[d]">LSM6DS3_G_GetAxesRaw</a> from lsm6ds3.o(i.LSM6DS3_G_GetAxesRaw) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[15]">LSM6DS3_G_GetSensitivity</a> from lsm6ds3.o(i.LSM6DS3_G_GetSensitivity) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[16]">LSM6DS3_G_Get_FS</a> from lsm6ds3.o(i.LSM6DS3_G_Get_FS) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[13]">LSM6DS3_G_Get_ODR</a> from lsm6ds3.o(i.LSM6DS3_G_Get_ODR) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[17]">LSM6DS3_G_Set_FS</a> from lsm6ds3.o(i.LSM6DS3_G_Set_FS) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[14]">LSM6DS3_G_Set_ODR</a> from lsm6ds3.o(i.LSM6DS3_G_Set_ODR) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[1a]">LSM6DS3_Get_Status_Free_Fall_Detection</a> from lsm6ds3.o(i.LSM6DS3_Get_Status_Free_Fall_Detection) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[8]">LSM6DS3_Init</a> from lsm6ds3.o(i.LSM6DS3_Init) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[9]">LSM6DS3_Read_XG_ID</a> from lsm6ds3.o(i.LSM6DS3_Read_XG_ID) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[a]">LSM6DS3_X_GetAxes</a> from lsm6ds3.o(i.LSM6DS3_X_GetAxes) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[b]">LSM6DS3_X_GetAxesRaw</a> from lsm6ds3.o(i.LSM6DS3_X_GetAxesRaw) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[10]">LSM6DS3_X_GetSensitivity</a> from lsm6ds3.o(i.LSM6DS3_X_GetSensitivity) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[11]">LSM6DS3_X_Get_FS</a> from lsm6ds3.o(i.LSM6DS3_X_Get_FS) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[e]">LSM6DS3_X_Get_ODR</a> from lsm6ds3.o(i.LSM6DS3_X_Get_ODR) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[12]">LSM6DS3_X_Set_FS</a> from lsm6ds3.o(i.LSM6DS3_X_Set_FS) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[f]">LSM6DS3_X_Set_ODR</a> from lsm6ds3.o(i.LSM6DS3_X_Set_ODR) referenced 2 times from lsm6ds3.o(.data)
 <LI><a href="#[84]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[83]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">MemManage_Handler</a> from bsp_isr.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">NMI_Handler</a> from bsp_isr.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6f]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[77]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[76]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[79]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[78]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">PendSV_Handler</a> from bsp_isr.o(i.PendSV_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[82]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7f]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[80]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[81]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">SVC_Handler</a> from bsp_isr.o(i.SVC_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">SysTick_Handler</a> from bsp_isr.o(i.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[87]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[2e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7d]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7e]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">USART1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[73]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">UsageFault_Handler</a> from bsp_isr.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[88]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[86]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[88]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[89]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[130]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[131]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[132]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[133]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[22]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_set_name
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[117]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_set_name
</UL>

<P><STRONG><a name="[8a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[13a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>ADC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_isr.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; HAL_ADC_IRQHandler &rArr; HAL_ADC_ConvCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>BNRG_SPI_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32_bluenrg_ble.o(i.BNRG_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BNRG_SPI_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>BSP_HUM_TEMP_CheckID</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a1_hum_temp.o(i.BSP_HUM_TEMP_CheckID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BSP_HUM_TEMP_CheckID &rArr; HTS221_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>

<P><STRONG><a name="[97]"></a>BSP_IMU_6AXES_Check_XG_ID</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_iks01a1_imu_6axes.o(i.BSP_IMU_6AXES_Check_XG_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IMU_6AXES_Check_XG_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IMU_6AXES_Read_XG_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>

<P><STRONG><a name="[12d]"></a>BSP_IMU_6AXES_Init</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, x_nucleo_iks01a1_imu_6axes.o(i.BSP_IMU_6AXES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_IMU_6AXES_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>

<P><STRONG><a name="[98]"></a>BSP_IMU_6AXES_Read_XG_ID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, x_nucleo_iks01a1_imu_6axes.o(i.BSP_IMU_6AXES_Read_XG_ID))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IMU_6AXES_Check_XG_ID
</UL>

<P><STRONG><a name="[99]"></a>BSP_PRESSURE_CheckID</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_CheckID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_CheckID
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>

<P><STRONG><a name="[12c]"></a>BSP_PRESSURE_Init</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_PRESSURE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>

<P><STRONG><a name="[9a]"></a>BSP_PRESSURE_ReadID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_ReadID))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_CheckID
</UL>

<P><STRONG><a name="[9b]"></a>BlueNRG_RST</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32_bluenrg_ble.o(i.BlueNRG_RST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BlueNRG_RST &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>BlueNRG_SPI_Write</STRONG> (Thumb, 194 bytes, Stack size 328 bytes, stm32_bluenrg_ble.o(i.BlueNRG_SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_IRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_IRQ
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_irq_as_output
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_irq_as_input
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
</UL>

<P><STRONG><a name="[26]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_isr.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>Clock_Time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clock.o(i.Clock_Time))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Expired
</UL>

<P><STRONG><a name="[64]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_isr.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_isr.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>Disable_SPI_IRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_bluenrg_ble.o(i.Disable_SPI_IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
</UL>

<P><STRONG><a name="[36]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_isr.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>Enable_SPI_IRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_bluenrg_ble.o(i.Enable_SPI_IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
</UL>

<P><STRONG><a name="[aa]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[c8]"></a>FMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_ll_fmc.o(i.FMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[c6]"></a>FMC_NORSRAM_Init</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, stm32f4xx_ll_fmc.o(i.FMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[c7]"></a>FMC_NORSRAM_Timing_Init</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32f4xx_ll_fmc.o(i.FMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[ab]"></a>FMC_Test</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, fmc_nor.o(i.FMC_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FMC_Test &rArr; HAL_NOR_Init &rArr; HAL_NOR_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Read_ID
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adc0.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_ConvCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[8f]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_IRQHandler &rArr; HAL_ADC_ConvCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 3940 bytes, Stack size 40 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_RST
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_start_advertising
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>

<P><STRONG><a name="[b3]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>HAL_GPIO_Init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_MspInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_irq_as_output
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_irq_as_input
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[ef]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
</UL>

<P><STRONG><a name="[9c]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_RST
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_irq_as_output
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
</UL>

<P><STRONG><a name="[a5]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[b4]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>

<P><STRONG><a name="[e5]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_I2C_Init</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_Init &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_ReadData
</UL>

<P><STRONG><a name="[bc]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_WriteData
</UL>

<P><STRONG><a name="[b5]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[b7]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[be]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_NOR_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_nor.o(i.HAL_NOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_NOR_Init &rArr; HAL_NOR_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Timing_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Test
</UL>

<P><STRONG><a name="[c5]"></a>HAL_NOR_MspInit</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, fmc_nor.o(i.HAL_NOR_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_NOR_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_NOR_Read_ID</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_nor.o(i.HAL_NOR_Read_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NOR_Read_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Test
</UL>

<P><STRONG><a name="[a7]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_IRQ
</UL>

<P><STRONG><a name="[a9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_IRQ
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[c4]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[bf]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 664 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 514 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[b8]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[cf]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 806 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[d0]"></a>HAL_RTC_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 72 bytes, Stack size 104 bytes, stm32f4xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[d3]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[94]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNRG_SPI_Init
</UL>

<P><STRONG><a name="[d8]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, stm32_bluenrg_ble.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 682 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
</UL>

<P><STRONG><a name="[c3]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[da]"></a>HCI_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hci.o(i.HCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HCI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>HCI_Queue_Empty</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci.o(i.HCI_Queue_Empty))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[96]"></a>HTS221_IO_Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.HTS221_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUM_TEMP_CheckID
</UL>

<P><STRONG><a name="[e0]"></a>Hal_Write_Serial</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, stm32_bluenrg_ble.o(i.Hal_Write_Serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Expired
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write
</UL>

<P><STRONG><a name="[24]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_isr.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>LCD_IO_Init</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, bsp_common.o(i.LCD_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_IO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_Init
</UL>

<P><STRONG><a name="[ed]"></a>LCD_IO_ReadData</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, bsp_common.o(i.LCD_IO_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_IO_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_abit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>

<P><STRONG><a name="[f0]"></a>LCD_IO_WriteData</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bsp_common.o(i.LCD_IO_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_WriteData
</UL>

<P><STRONG><a name="[f1]"></a>LCD_IO_WriteReg</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bsp_common.o(i.LCD_IO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_IO_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_WriteReg
</UL>

<P><STRONG><a name="[f8]"></a>LPS25HB_IO_ITConfig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LPS25HB_IO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[f3]"></a>LPS25HB_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LPS25HB_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPS25HB_IO_Init &rArr; PRESSURE_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSURE_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[f2]"></a>LPS25HB_IO_Read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LPS25HB_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPS25HB_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSURE_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_RebootCmd
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadID
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_PowerOff
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_GetTemperature
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_GetPressure
</UL>

<P><STRONG><a name="[f6]"></a>LPS25HB_IO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LPS25HB_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPS25HB_IO_Write &rArr; PRESSURE_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSURE_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_RebootCmd
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_PowerOff
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[fc]"></a>LPS25H_IO_ITConfig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LPS25H_IO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_Init
</UL>

<P><STRONG><a name="[fa]"></a>LPS25H_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LPS25H_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPS25H_IO_Init &rArr; PRESSURE_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSURE_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_Init
</UL>

<P><STRONG><a name="[f9]"></a>LPS25H_IO_Read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LPS25H_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPS25H_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSURE_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_RebootCmd
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_ReadID
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_PowerOff
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_Init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_GetTemperature
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_GetPressure
</UL>

<P><STRONG><a name="[fb]"></a>LPS25H_IO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LPS25H_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPS25H_IO_Write &rArr; PRESSURE_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSURE_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_RebootCmd
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_PowerOff
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_Init
</UL>

<P><STRONG><a name="[fd]"></a>LSM303AGR_MAG_R_WHO_AM_I</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LSM303AGR_mag
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>

<P><STRONG><a name="[fe]"></a>LSM303AGR_MAG_ReadReg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.LSM303AGR_MAG_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM303AGR_MAG_ReadReg &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
</UL>

<P><STRONG><a name="[ff]"></a>LSM303AGR_MAG_W_MD</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_MD))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_MAG_W_MD &rArr; LSM303AGR_MAG_WriteReg &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LSM303AGR_mag
</UL>

<P><STRONG><a name="[101]"></a>LSM303AGR_MAG_W_ODR</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_MAG_W_ODR &rArr; LSM303AGR_MAG_WriteReg &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LSM303AGR_mag
</UL>

<P><STRONG><a name="[100]"></a>LSM303AGR_MAG_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, x_nucleo_iks01a1.o(i.LSM303AGR_MAG_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM303AGR_MAG_WriteReg &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
</UL>

<P><STRONG><a name="[106]"></a>LSM6DS3_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LSM6DS3_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LSM6DS3_IO_Init &rArr; IMU_6AXES_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_6AXES_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Init
</UL>

<P><STRONG><a name="[103]"></a>LSM6DS3_IO_Read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LSM6DS3_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_6AXES_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_FS
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_ODR
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_FS
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_GetSensitivity
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_GetAxesRaw
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Read_XG_ID
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Get_Status_Free_Fall_Detection
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_ODR
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_FS
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_GetSensitivity
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_GetAxesRaw
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Enable_Free_Fall_Detection
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Disable_Free_Fall_Detection
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Common_Sensor_Enable
</UL>

<P><STRONG><a name="[104]"></a>LSM6DS3_IO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LSM6DS3_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DS3_IO_Write &rArr; IMU_6AXES_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_6AXES_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_FS
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Enable_Free_Fall_Detection
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Disable_Free_Fall_Detection
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Common_Sensor_Enable
</UL>

<P><STRONG><a name="[25]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_isr.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_isr.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>Osal_MemCpy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal.o(i.Osal_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_auth_requirement
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[10a]"></a>Osal_MemSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal.o(i.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_auth_requirement
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[2a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_isr.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[d5]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[d2]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[28]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_isr.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_isr.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>Timer_Expired</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gp_timer.o(i.Timer_Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_Expired
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
</UL>

<P><STRONG><a name="[e1]"></a>Timer_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gp_timer.o(i.Timer_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
</UL>

<P><STRONG><a name="[27]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_isr.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[13e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10d]"></a>aci_gap_init</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, bluenrg_gap_aci.o(i.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = aci_gap_init &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init_bluenrg
</UL>

<P><STRONG><a name="[10f]"></a>aci_gap_set_auth_requirement</STRONG> (Thumb, 118 bytes, Stack size 88 bytes, bluenrg_gap_aci.o(i.aci_gap_set_auth_requirement))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = aci_gap_set_auth_requirement &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init_bluenrg
</UL>

<P><STRONG><a name="[110]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 192 bytes, Stack size 120 bytes, bluenrg_gap_aci.o(i.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_start_advertising
</UL>

<P><STRONG><a name="[92]"></a>aci_gatt_add_char</STRONG> (Thumb, 186 bytes, Stack size 112 bytes, bluenrg_gatt_aci.o(i.aci_gatt_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = aci_gatt_add_char &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Service
</UL>

<P><STRONG><a name="[91]"></a>aci_gatt_add_serv</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, bluenrg_gatt_aci.o(i.aci_gatt_add_serv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = aci_gatt_add_serv &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Service
</UL>

<P><STRONG><a name="[111]"></a>aci_gatt_init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, bluenrg_gatt_aci.o(i.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = aci_gatt_init &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init_bluenrg
</UL>

<P><STRONG><a name="[112]"></a>aci_gatt_update_char_value</STRONG> (Thumb, 128 bytes, Stack size 200 bytes, bluenrg_gatt_aci.o(i.aci_gatt_update_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_start_advertising
</UL>

<P><STRONG><a name="[113]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, bluenrg_hal_aci.o(i.aci_hal_set_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = aci_hal_set_tx_power_level &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_tx_power
</UL>

<P><STRONG><a name="[114]"></a>aci_hal_write_config_data</STRONG> (Thumb, 96 bytes, Stack size 176 bytes, bluenrg_hal_aci.o(i.aci_hal_write_config_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = aci_hal_write_config_data &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_address
</UL>

<P><STRONG><a name="[115]"></a>ble_address</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluenrg_sdk_api.o(i.ble_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ble_address &rArr; aci_hal_write_config_data &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_param
</UL>

<P><STRONG><a name="[116]"></a>ble_device_set_name</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bluenrg_sdk_api.o(i.ble_device_set_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_set_name &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_param
</UL>

<P><STRONG><a name="[119]"></a>ble_device_start_advertising</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, bluenrg_sdk_api.o(i.ble_device_start_advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ble_device_start_advertising &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>

<P><STRONG><a name="[11b]"></a>ble_init_bluenrg</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bluenrg_sdk_api.o(i.ble_init_bluenrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ble_init_bluenrg &rArr; Add_Service &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_auth_requirement
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Service
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_param
</UL>

<P><STRONG><a name="[11c]"></a>ble_set_adv_param</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bluenrg_sdk_api.o(i.ble_set_adv_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = ble_set_adv_param &rArr; ble_init_bluenrg &rArr; Add_Service &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_tx_power
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init_bluenrg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_set_name
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_address
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>

<P><STRONG><a name="[11d]"></a>ble_set_tx_power</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluenrg_sdk_api.o(i.ble_set_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ble_set_tx_power &rArr; aci_hal_set_tx_power_level &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_param
</UL>

<P><STRONG><a name="[ee]"></a>delay_abit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_common.o(i.delay_abit))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
</UL>

<P><STRONG><a name="[12a]"></a>dispatch_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dispatch.o(i.dispatch_init))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>hci_le_set_scan_resp_data</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, hci.o(i.hci_le_set_scan_resp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = hci_le_set_scan_resp_data &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_start_advertising
</UL>

<P><STRONG><a name="[11e]"></a>hci_send_cmd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hci.o(i.hci_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[10e]"></a>hci_send_req</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, hci.o(i.hci_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_head
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_is_empty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_head
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init_head
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_IRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Queue_Empty
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_list
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Expired
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_auth_requirement
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[11f]"></a>hci_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hci.o(i.hci_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
</UL>

<P><STRONG><a name="[123]"></a>init_LSM303AGR_mag</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm303agr.o(i.init_LSM303AGR_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = init_LSM303AGR_mag &rArr; LSM303AGR_MAG_W_ODR &rArr; LSM303AGR_MAG_WriteReg &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>

<P><STRONG><a name="[db]"></a>list_init_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.list_init_head))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
</UL>

<P><STRONG><a name="[121]"></a>list_insert_head</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, list.o(i.list_insert_head))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[dc]"></a>list_insert_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, list.o(i.list_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_list
</UL>

<P><STRONG><a name="[de]"></a>list_is_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, list.o(i.list_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Queue_Empty
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_list
</UL>

<P><STRONG><a name="[120]"></a>list_remove_head</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, list.o(i.list_remove_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = list_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_list
</UL>

<P><STRONG><a name="[127]"></a>list_remove_node</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, list.o(i.list_remove_node))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_head
</UL>

<P><STRONG><a name="[86]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = main &rArr; on_ready &rArr; ble_set_adv_param &rArr; ble_init_bluenrg &rArr; Add_Service &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_RST
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNRG_SPI_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Test
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[12b]"></a>on_ready</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, app.o(i.on_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = on_ready &rArr; ble_set_adv_param &rArr; ble_init_bluenrg &rArr; Add_Service &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_WriteReg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_WriteData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LSM303AGR_mag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_param
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_start_advertising
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_CheckID
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IMU_6AXES_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IMU_6AXES_Check_XG_ID
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUM_TEMP_CheckID
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setRow_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>rtc_init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, stm32f401_lp_mode.o(i.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rtc_init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>set_irq_as_input</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32_bluenrg_ble.o(i.set_irq_as_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_irq_as_input &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
</UL>

<P><STRONG><a name="[a0]"></a>set_irq_as_output</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32_bluenrg_ble.o(i.set_irq_as_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
</UL>

<P><STRONG><a name="[128]"></a>st7789v_Init</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, st7789v.o(i.st7789v_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = st7789v_Init &rArr; LCD_IO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>st7789v_WriteData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st7789v.o(i.st7789v_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st7789v_WriteData &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setRow_cursor
</UL>

<P><STRONG><a name="[125]"></a>st7789v_WriteReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st7789v.o(i.st7789v_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st7789v_WriteReg &rArr; LCD_IO_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setRow_cursor
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[124]"></a>lcd_setRow_cursor</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app.o(i.lcd_setRow_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_setRow_cursor &rArr; st7789v_WriteReg &rArr; LCD_IO_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_WriteReg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ready
</UL>

<P><STRONG><a name="[10c]"></a>SystemClock_Config</STRONG> (Thumb, 130 bytes, Stack size 136 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>move_list</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hci.o(i.move_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = move_list &rArr; list_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_head
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_is_empty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[90]"></a>Add_Service</STRONG> (Thumb, 220 bytes, Stack size 128 bytes, bluenrg_sdk_api.o(i.Add_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = Add_Service &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; set_irq_as_output &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init_bluenrg
</UL>

<P><STRONG><a name="[5]"></a>LPS25HB_GetPressure</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lps25hb.o(i.LPS25HB_GetPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_GetPressure &rArr; LPS25HB_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>LPS25HB_GetTemperature</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps25hb.o(i.LPS25HB_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_GetTemperature &rArr; LPS25HB_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>LPS25HB_Init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lps25hb.o(i.LPS25HB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_Init &rArr; LPS25HB_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Write
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Read
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>LPS25HB_PowerOff</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps25hb.o(i.LPS25HB_PowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_PowerOff &rArr; LPS25HB_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Write
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>LPS25HB_ReadID</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lps25hb.o(i.LPS25HB_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPS25HB_ReadID &rArr; LPS25HB_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>LPS25HB_RebootCmd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps25hb.o(i.LPS25HB_RebootCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_RebootCmd &rArr; LPS25HB_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Write
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>LPS25HB_SlaveAddrRemap</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lps25hb.o(i.LPS25HB_SlaveAddrRemap))
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>LSM6DS3_Common_Sensor_Enable</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lsm6ds3.o(i.LSM6DS3_Common_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_Common_Sensor_Enable &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Init
</UL>

<P><STRONG><a name="[19]"></a>LSM6DS3_Disable_Free_Fall_Detection</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lsm6ds3.o(i.LSM6DS3_Disable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_Disable_Free_Fall_Detection &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>LSM6DS3_Enable_Free_Fall_Detection</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, lsm6ds3.o(i.LSM6DS3_Enable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_Enable_Free_Fall_Detection &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>LSM6DS3_G_GetAxes</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lsm6ds3.o(i.LSM6DS3_G_GetAxes))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_G_GetAxes &rArr; LSM6DS3_G_GetSensitivity &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_GetSensitivity
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_GetAxesRaw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>LSM6DS3_G_GetAxesRaw</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_G_GetAxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_G_GetAxesRaw &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>LSM6DS3_G_GetSensitivity</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_G_GetSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_G_GetSensitivity &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>LSM6DS3_G_Get_FS</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_G_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_G_Get_FS &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>LSM6DS3_G_Get_ODR</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_G_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_G_Get_ODR &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>LSM6DS3_G_Set_Axes_Status</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lsm6ds3.o(i.LSM6DS3_G_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_G_Set_Axes_Status &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Init
</UL>

<P><STRONG><a name="[17]"></a>LSM6DS3_G_Set_FS</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, lsm6ds3.o(i.LSM6DS3_G_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_G_Set_FS &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>LSM6DS3_G_Set_ODR</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_G_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_G_Set_ODR &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>LSM6DS3_Get_Status_Free_Fall_Detection</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_Get_Status_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_Get_Status_Free_Fall_Detection &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>LSM6DS3_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lsm6ds3.o(i.LSM6DS3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_Init &rArr; LSM6DS3_X_Set_Axes_Status &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_FS
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Common_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>LSM6DS3_Read_XG_ID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lsm6ds3.o(i.LSM6DS3_Read_XG_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DS3_Read_XG_ID &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>LSM6DS3_X_GetAxes</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lsm6ds3.o(i.LSM6DS3_X_GetAxes))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_X_GetAxes &rArr; LSM6DS3_X_GetSensitivity &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_GetSensitivity
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_GetAxesRaw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>LSM6DS3_X_GetAxesRaw</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_X_GetAxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_X_GetAxesRaw &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>LSM6DS3_X_GetSensitivity</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_X_GetSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_X_GetSensitivity &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>LSM6DS3_X_Get_FS</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_X_Get_FS &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>LSM6DS3_X_Get_ODR</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_X_Get_ODR &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[107]"></a>LSM6DS3_X_Set_Axes_Status</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lsm6ds3.o(i.LSM6DS3_X_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_Axes_Status &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Init
</UL>

<P><STRONG><a name="[12]"></a>LSM6DS3_X_Set_FS</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_X_Set_FS &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>LSM6DS3_X_Set_ODR</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, lsm6ds3.o(i.LSM6DS3_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_X_Set_ODR &rArr; LSM6DS3_IO_Read &rArr; IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>LPS25H_GetPressure</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lps25h.o(i.LPS25H_GetPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25H_GetPressure &rArr; LPS25H_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25h.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>LPS25H_GetTemperature</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps25h.o(i.LPS25H_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25H_GetTemperature &rArr; LPS25H_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25h.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>LPS25H_Init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lps25h.o(i.LPS25H_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25H_Init &rArr; LPS25H_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25h.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>LPS25H_PowerOff</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps25h.o(i.LPS25H_PowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25H_PowerOff &rArr; LPS25H_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25h.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>LPS25H_ReadID</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lps25h.o(i.LPS25H_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPS25H_ReadID &rArr; LPS25H_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25h.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>LPS25H_RebootCmd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps25h.o(i.LPS25H_RebootCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25H_RebootCmd &rArr; LPS25H_IO_Read &rArr; PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25h.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>LPS25H_SlaveAddrRemap</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lps25h.o(i.LPS25H_SlaveAddrRemap))
<BR>[Address Reference Count : 1]<UL><LI> lps25h.o(.data)
</UL>
<P><STRONG><a name="[e3]"></a>I2C_EXPBD_Error</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.I2C_EXPBD_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_EXPBD_Error &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_WriteData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_ReadData
</UL>

<P><STRONG><a name="[e4]"></a>I2C_EXPBD_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.I2C_EXPBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSURE_IO_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_6AXES_IO_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>

<P><STRONG><a name="[e6]"></a>I2C_EXPBD_MspInit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, x_nucleo_iks01a1.o(i.I2C_EXPBD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[df]"></a>I2C_EXPBD_ReadData</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, x_nucleo_iks01a1.o(i.I2C_EXPBD_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_IO_Read
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSURE_IO_Read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_6AXES_IO_Read
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>

<P><STRONG><a name="[e7]"></a>I2C_EXPBD_WriteData</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, x_nucleo_iks01a1.o(i.I2C_EXPBD_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSURE_IO_Write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_6AXES_IO_Write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
</UL>

<P><STRONG><a name="[e9]"></a>IMU_6AXES_IO_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.IMU_6AXES_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IMU_6AXES_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Init
</UL>

<P><STRONG><a name="[ea]"></a>IMU_6AXES_IO_Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.IMU_6AXES_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IMU_6AXES_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Read
</UL>

<P><STRONG><a name="[eb]"></a>IMU_6AXES_IO_Write</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.IMU_6AXES_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IMU_6AXES_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_IO_Write
</UL>

<P><STRONG><a name="[f4]"></a>PRESSURE_IO_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.PRESSURE_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PRESSURE_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Init
</UL>

<P><STRONG><a name="[f5]"></a>PRESSURE_IO_Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.PRESSURE_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PRESSURE_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Read
</UL>

<P><STRONG><a name="[f7]"></a>PRESSURE_IO_Write</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.PRESSURE_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PRESSURE_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_IO_Write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25H_IO_Write
</UL>

<P><STRONG><a name="[ca]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[ba]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[bd]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[bb]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[e8]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[d9]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
